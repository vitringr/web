const PERMUTATIONS = new Uint8Array([
  9, 159, 97, 66, 201, 20, 105, 192, 168, 220, 72, 253, 5, 88, 190, 162, 163,
  61, 129, 217, 4, 194, 255, 204, 115, 185, 59, 33, 48, 177, 200, 117, 113, 248,
  7, 95, 133, 121, 1, 176, 144, 8, 127, 39, 62, 193, 236, 81, 244, 112, 75, 51,
  80, 11, 70, 0, 175, 60, 116, 142, 102, 135, 85, 137, 106, 32, 13, 91, 101,
  232, 47, 170, 229, 71, 131, 86, 42, 76, 100, 187, 145, 240, 182, 19, 53, 108,
  15, 87, 73, 235, 130, 136, 216, 41, 28, 74, 155, 68, 225, 183, 38, 231, 156,
  211, 64, 228, 152, 254, 46, 154, 207, 212, 17, 83, 150, 203, 109, 50, 195, 34,
  251, 55, 45, 215, 184, 96, 16, 179, 43, 208, 148, 245, 138, 132, 37, 164, 189,
  118, 181, 30, 171, 18, 226, 146, 230, 107, 63, 78, 134, 196, 44, 198, 3, 93,
  25, 123, 158, 219, 69, 124, 247, 140, 103, 94, 188, 57, 160, 213, 98, 89, 218,
  153, 90, 147, 6, 56, 92, 122, 49, 29, 214, 243, 111, 139, 99, 238, 173, 104,
  197, 202, 51, 250, 205, 141, 119, 166, 21, 58, 234, 165, 239, 77, 172, 36, 2,
  237, 167, 110, 241, 126, 210, 24, 209, 233, 149, 14, 224, 114, 18, 227, 186,
  242, 174, 67, 161, 65, 31, 222, 40, 10, 206, 143, 27, 221, 22, 120, 178, 246,
  52, 169, 249, 82, 35, 84, 79, 125, 54, 23, 128, 199, 252, 157, 223, 26, 191,
  12,
  // Duplicate
  9, 159, 97, 66, 201, 20, 105, 192, 168, 220, 72, 253, 5, 88, 190, 162, 163,
  61, 129, 217, 4, 194, 255, 204, 115, 185, 59, 33, 48, 177, 200, 117, 113, 248,
  7, 95, 133, 121, 1, 176, 144, 8, 127, 39, 62, 193, 236, 81, 244, 112, 75, 51,
  80, 11, 70, 0, 175, 60, 116, 142, 102, 135, 85, 137, 106, 32, 13, 91, 101,
  232, 47, 170, 229, 71, 131, 86, 42, 76, 100, 187, 145, 240, 182, 19, 53, 108,
  15, 87, 73, 235, 130, 136, 216, 41, 28, 74, 155, 68, 225, 183, 38, 231, 156,
  211, 64, 228, 152, 254, 46, 154, 207, 212, 17, 83, 150, 203, 109, 50, 195, 34,
  251, 55, 45, 215, 184, 96, 16, 179, 43, 208, 148, 245, 138, 132, 37, 164, 189,
  118, 181, 30, 171, 18, 226, 146, 230, 107, 63, 78, 134, 196, 44, 198, 3, 93,
  25, 123, 158, 219, 69, 124, 247, 140, 103, 94, 188, 57, 160, 213, 98, 89, 218,
  153, 90, 147, 6, 56, 92, 122, 49, 29, 214, 243, 111, 139, 99, 238, 173, 104,
  197, 202, 51, 250, 205, 141, 119, 166, 21, 58, 234, 165, 239, 77, 172, 36, 2,
  237, 167, 110, 241, 126, 210, 24, 209, 233, 149, 14, 224, 114, 18, 227, 186,
  242, 174, 67, 161, 65, 31, 222, 40, 10, 206, 143, 27, 221, 22, 120, 178, 246,
  52, 169, 249, 82, 35, 84, 79, 125, 54, 23, 128, 199, 252, 157, 223, 26, 191,
  12,
]) as Readonly<Uint8Array>;

const RANDOM = new Float32Array([
  0.530808754606223, 0.801906177951496, 0.440304067970466, 0.441558098871269,
  0.875570283088399, 0.901566203628917, 0.806166265408591, 0.749149154591195,
  0.906990957257928, 0.62279650968968, 0.308825876709458, 0.607139860769715,
  0.762985955548777, 0.919906222844232, 0.010386367570953, 0.527325801160152,
  0.804393445015222, 0.487443115495577, 0.294000026956194, 0.86193131430829,
  0.892702990874504, 0.858617531080986, 0.681916543203439, 0.555797574613816,
  0.98258970459623, 0.463986159778347, 0.401218285775547, 0.008979567438514,
  0.129010352299935, 0.694095680015366, 0.869578993956347, 0.467804085897669,
  0.821483907788496, 0.080740415094533, 0.291294997771842, 0.824660247726402,
  0.971956894436105, 0.610763277662353, 0.270601407535206, 0.136176584173442,
  0.966800160753914, 0.53014651821926, 0.399592290858092, 0.365487424854827,
  0.638007473461269, 0.011957644388935, 0.933344162396952, 0.611296945072363,
  0.132231989547319, 0.229539576640075, 0.870549413271317, 0.217531898843056,
  0.635559832604485, 0.322866175154942, 0.475970451622032, 0.212608231731813,
  0.595392566115715, 0.621907733940736, 0.808675740080856, 0.901573623991969,
  0.925411077768229, 0.535711468689191, 0.247503203630365, 0.121454437000962,
  0.829890285852225, 0.771961397909909, 0.5191304185596, 0.683327786428502,
  0.191624773210477, 0.367964238776803, 0.720849495244845, 0.861703422916627,
  0.873891440988505, 0.474345979399887, 0.354565022566838, 0.325775914265962,
  0.226401113133091, 0.355042241730825, 0.677464462116617, 0.624461341806712,
  0.235270149322432, 0.869469939476159, 0.383065164437997, 0.052396857144492,
  0.123320989733991, 0.761796333821702, 0.234913215375463, 0.362514214553049,
  0.352510241240129, 0.372329157608553, 0.668101272731797, 0.204919427716464,
  0.999544903925806, 0.062901956752334, 0.254008732268145, 0.929752319630943,
  0.862040692788337, 0.226618174771281, 0.365305391681892, 0.184390578744641,
  0.288845447476665, 0.334052705791179, 0.793436389145594, 0.330162619297149,
  0.881601630789696, 0.337964044741454, 0.036365240104798, 0.131387292598927,
  0.745412062036655, 0.798406162804645, 0.792731847743735, 0.743184175730589,
  0.726255274077288, 0.29597548229415, 0.951252222839542, 0.568598885932536,
  0.683550334055105, 0.396881026644144, 0.504493151912882, 0.004178869389133,
  0.690069936506057, 0.832951711734008, 0.837435686942876, 0.213495994906795,
  0.288012345086586, 0.407657395699988, 0.787406910422747, 0.870285689372578,
  0.925915682711627, 0.690429561722211, 0.677655809001902, 0.344484838637088,
  0.346343955904476, 0.049796825345165, 0.774868675644728, 0.237819547771206,
  0.135728340601617, 0.483759569719152, 0.892753808706534, 0.808525242682467,
  0.09772338879056, 0.699636148705095, 0.917469412437974, 0.099594503981663,
  0.157950742081626, 0.064595357327973, 0.391063971901525, 0.185876411851865,
  0.654379954583476, 0.767210757576789, 0.105216559513482, 0.06709358824799,
  0.565461230930677, 0.44376861325426, 0.017972933945995, 0.739647004918347,
  0.179493734706395, 0.684626489836166, 0.388396964345431, 0.389905177054749,
  0.599002671379067, 0.911882529023736, 0.944914401415745, 0.905438542071512,
  0.763420442702613, 0.777726875495076, 0.632641630949941, 0.421753174199478,
  0.436825710289461, 0.783346509856846, 0.049999793798975, 0.74759965909378,
  0.644060980206734, 0.321278248791441, 0.602047970871006, 0.147385469455824,
  0.381964310270485, 0.353450908341105, 0.25639646969015, 0.291047491764257,
  0.536407054607201, 0.495858757354817, 0.413580610535863, 0.10922086839332,
  0.542113181586229, 0.57391619862471, 0.582135147031315, 0.933287132998935,
  0.781531179322828, 0.832745904028883, 0.007710589455911, 0.621257936518639,
  0.646091192153197, 0.448510371268025, 0.981611391989883, 0.123486707932719,
  0.807202835775763, 0.517573396340278, 0.857347437006542, 0.935858570302893,
  0.769906633518885, 0.662186802848644, 0.73106751950855, 0.103481654485007,
  0.618602185986883, 0.55529106130186, 0.855449532401606, 0.814003529368284,
  0.246410633220801, 0.729945341902808, 0.122955155880456, 0.057555278355579,
  0.919673917199783, 0.889739993061514, 0.926705944157464, 0.89054035255854,
  0.25379554100496, 0.523628252118417, 0.097581966808293, 0.936939769040054,
  0.597577862373883, 0.242732916496728, 0.582387113853452, 0.313010451889189,
  0.359375190554147, 0.411545562314998, 0.641252347009927, 0.582934897526341,
  0.200596929659576, 0.195509979701062, 0.407043029272893, 0.647475719451584,
  0.868644723517561, 0.087341836543167, 0.74604373751086, 0.262332429892606,
  0.682697334824648, 0.80291558820842, 0.765199736071168, 0.151387352813943,
  0.314707602239059, 0.149694956845768, 0.994786922078942, 0.440973360142369,
  0.684811369062012, 0.367173136363006, 0.373426756429348, 0.915527094257531,
  0.747148518687739, 0.415103465025432, 0.717760370459176, 0.251366807909799,
  0.819477933545402, 0.329780432390009, 0.958371453428568, 0.673156506105483,
]) as Readonly<Float32Array>;

function smoothstep(t: number): number {
  return t * t * (3 - 2 * t);
}

function lerp(a: number, b: number, step: number): number {
  return a + step * (b - a);
}

export function get(x: number, y: number): number {
  const xIndex = Math.floor(x) & 255;
  const yIndex = Math.floor(y) & 255;
  const xFraction = x - Math.floor(x);
  const yFraction = y - Math.floor(y);

  const xFade = smoothstep(xFraction);
  const yFade = smoothstep(yFraction);

  const bl = PERMUTATIONS[PERMUTATIONS[xIndex] + yIndex];
  const br = PERMUTATIONS[PERMUTATIONS[xIndex + 1] + yIndex];
  const tl = PERMUTATIONS[PERMUTATIONS[xIndex] + yIndex + 1];
  const tr = PERMUTATIONS[PERMUTATIONS[xIndex + 1] + yIndex + 1];

  const bot = lerp(RANDOM[bl], RANDOM[br], xFade);
  const top = lerp(RANDOM[tl], RANDOM[tr], xFade);

  return lerp(bot, top, yFade);
}

export function getFractal(x: number, y: number, octaves: number) {
  let total = 0.0;
  let frequency = 1.0;
  let amplitude = 1.0;
  let maxValue = 0.0;

  for (let i = 0; i < octaves; i++) {
    total += get(x * frequency, y * frequency) * amplitude;
    maxValue += amplitude;
    amplitude *= 0.5;
    frequency *= 2.0;
  }

  return total / maxValue;
}
